#include "main.h"
#include "CLCD.h"
#include <stdio.h>

/* LCD handle */
CLCD_Name LCD1;
uint8_t Count = 0;      // Giá tr? hi?n th? 0-9
char LCD_send[16];

/* LED7 segment CA (PA0->a ... PA6->g, PA7->DP) */
const uint8_t LED7_TABLE[10] = {
    0x3F, // 0
    0x06, // 1
    0x5B, // 2
    0x4F, // 3
    0x66, // 4
    0x6D, // 5
    0x7D, // 6
    0x07, // 7
    0x7F, // 8
    0x6F  // 9
};

/* Debounce variables */
uint32_t lastTickPB0 = 0;
uint32_t lastTickPB1 = 0;
uint32_t lastTickPB10 = 0;

/* Function prototypes */
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
void LCD_Update(void);
void LED7_Display(uint8_t value);

/* C?p nh?t LCD */
void LCD_Update(void)
{
    CLCD_SetCursor(&LCD1, 0, 0);
    CLCD_WriteString(&LCD1, "NAM HIEU        "); // xóa ký t? cu
    sprintf(LCD_send, "Count : %d   ", Count);
    CLCD_SetCursor(&LCD1, 0, 1);
    CLCD_WriteString(&LCD1, LCD_send);
}

/* C?p nh?t LED7 */
void LED7_Display(uint8_t value)
{
    uint8_t pattern = LED7_TABLE[value % 10];
    for(int i = 0; i < 8; i++)
    {
        HAL_GPIO_WritePin(GPIOA, (1<<i), (pattern & (1<<i)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    }
}

/* Ng?t ngoài callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
    uint32_t tick = HAL_GetTick(); // L?y th?i gian hi?n t?i

    if(GPIO_Pin == GPIO_PIN_0)  // PB0: Tang
    {
        if(tick - lastTickPB0 > 50) // debounce 50ms
        {
            Count++;
            if(Count > 9) Count = 0;
            lastTickPB0 = tick;
        }
    }
    else if(GPIO_Pin == GPIO_PIN_10) // PB10: Gi?m
    {
        if(tick - lastTickPB10 > 50)
        {
            if(Count == 0) Count = 9;
            else Count--;
            lastTickPB10 = tick;
        }
    }
    else if(GPIO_Pin == GPIO_PIN_1) // PB1: Reset
    {
        if(tick - lastTickPB1 > 50)
        {
            Count = 0;
            lastTickPB1 = tick;
        }
    }

    // C?p nh?t LCD + LED7 ngay khi nh?n
    LCD_Update();
    LED7_Display(Count);
}

int main(void)
{
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();

    // Kh?i t?o LCD 16x2 (8-bit)
    CLCD_8BIT_Init(&LCD1, 16, 2,
                   CS_GPIO_Port, CS_Pin,
                   EN_GPIO_Port, EN_Pin,
                   D0_GPIO_Port, D0_Pin,
                   D1_GPIO_Port, D1_Pin,
                   D2_GPIO_Port, D2_Pin,
                   D3_GPIO_Port, D3_Pin,
                   D4_GPIO_Port, D4_Pin,
                   D5_GPIO_Port, D5_Pin,
                   D6_GPIO_Port, D6_Pin,
                   D7_GPIO_Port, D7_Pin);

    // Hi?n th? ban d?u
    LCD_Update();
    LED7_Display(Count);

    while(1)
    {
        // Main loop tr?ng, t?t c? di?u khi?n qua EXTI ng?t ngoài
    }
}

/* System Clock Configuration */
void SystemClock_Config(void)
{
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
    if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) while(1);

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
    if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) while(1);
}

/* GPIO Initialization */
void MX_GPIO_Init(void)
{
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    __HAL_RCC_GPIOA_CLK_ENABLE(); // LCD + LED7
    __HAL_RCC_GPIOB_CLK_ENABLE(); // Nút nh?n

    // LED7 PA0-PA7 output
    GPIO_InitStruct.Pin = 0xFF; // PA0–PA7
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    // LCD pins PB/PA
    GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin|D4_Pin;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
    GPIO_InitStruct.Pin = D5_Pin|D6_Pin|D7_Pin|EN_Pin|CS_Pin;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    // Nút nh?n PB0, PB1, PB10 input pull-up + EXTI
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; // ng?t c?nh xu?ng
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    // Enable EXTI IRQs
    HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);

    HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}

/* IRQ Handlers g?i HAL */
void EXTI0_IRQHandler(void) { HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0); }
void EXTI1_IRQHandler(void) { HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1); }
void EXTI15_10_IRQHandler(void) { HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10); }

void Error_Handler(void) { while(1); }
